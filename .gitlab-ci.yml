# vim: set expandtab shiftwidth=2 tabstop=8 textwidth=0:
#
# This is a bit complicated for two reasons:
# - we really want to run dnf/apt/... only once, updating on the test runner for
#   each job takes forever. So we create a docker image for each distribution
#   tested, then run the tests on this docker image.
#
# - GitLab only allows one script: set per job
#   but we have a bunch of commands we need to re-run for each build (meson &&
#   ninja && etc). YAML cannot merge arrays templates so we're screwed.
#
#   So instead we use BUILDSTRING as the main builder and pass what we need through
#   shell variables. The only two variables that matter:
#     MESON_PARAMS=-Denable-something=true
#     NINJA_ARGS=dist ... to run 'ninja -C builddir dist'
#
#
# All jobs must follow the naming scheme of
# <distribution>:<version>@activity:
#  e.g. fedora:28@build-default

stages:
  - docker_check  # check if the current docker images are up to date
  - docker_prep   # rebuild the docker images if previous step failed
  - build       # for actually building things

variables:
  MESON_BUILDDIR: builddir
  BUILDSTRING: 'rm -rf $MESON_BUILDDIR && meson $MESON_BUILDDIR $$MESON_PARAMS && meson configure $MESON_BUILDDIR && ninja -C $MESON_BUILDDIR $$NINJA_ARGS'
  NINJA_ARGS: ''
  MESON_PARAMS: ''
  FEDORA_RPMS: 'git gcc gcc-c++ meson check-devel libudev-devel libevdev-devel doxygen graphviz valgrind binutils libwacom-devel cairo-devel   gtk3-devel   glib2-devel    mtdev-devel  clang-analyzer'
  UBUNTU_DEBS: 'git gcc g++     meson check       libudev-dev   libevdev-dev   doxygen graphviz valgrind binutils libwacom-dev   libcairo2-dev libgtk-3-dev libglib2.0-dev libmtdev-dev'
  FEDORA_DOCKER_IMAGE: $CI_REGISTRY/libinput/$CI_PROJECT_NAME/fedora/$FEDORA_VERSION:latest
  UBUNTU_DOCKER_IMAGE: $CI_REGISTRY/libinput/$CI_PROJECT_NAME/ubuntu/$UBUNTU_VERSION:latest
  # When using docker-in-docker (dind), it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2

.default_artifacts: &default_artifacts
  artifacts:
    name: "meson-logs-$CI_JOB_NAME"
    when: always
    expire_in: 1 week
    paths:
      - $MESON_BUILDDIR/meson-logs

# parent target for building with the default build commands
.default_build: &default_build
  script:
    - eval $BUILDSTRING

# special rule to not expose the docker creation runners to other users
# than those who have set up the CI to push on the registry.
# Users who have write access to libinput/libinput will have write
# access to the registry, so the libinput/libinput is a catch-all for
# our core developers.
#
# we can add as many users as we want by adding a new line like:
#   - $GITLAB_USER_LOGIN == "someone"
.restrict_docker_creation: &restrict_docker_creation
  only:
    variables:
      # Note: this is a set of logical OR, not AND
      - $CI_PROJECT_PATH == "libinput/libinput"
      - $GITLAB_USER_LOGIN == "bentiss"
      - $GITLAB_USER_LOGIN == "whot"

#################################################################
#                                                               #
#                     docker check stage                        #
#                                                               #
#################################################################

.docker-check: &docker_check
  stage: docker_check
  services:
    - docker:dind
  script:
    - test "x" = "y" # Fail for testing
    # get the date of the current image
    - docker pull $CURRENT_DOCKER_IMAGE
    - IMG_DATE="$(docker inspect -f '{{ .Created }}' $CURRENT_DOCKER_IMAGE | cut -dT -f1)"

    # get today's date
    - TODAY=$(date -u +%F)
    - echo $TODAY $IMG_DATE

    # check if both dates are equal
    - test "$IMG_DATE" = "$TODAY"

    # export an artefact telling the next stage that the image is valid
    - touch .img_ready
  artifacts:
    name: image $CURRENT_DOCKER_IMAGE check
    expire_in: 20 min
    paths:
      - .img_ready
  allow_failure: true
  <<: *restrict_docker_creation


# TODO: check that the RPMS/DEBS are all in the current images

fedora:28@docker-check:
  variables:
    GIT_STRATEGY: none
    FEDORA_VERSION: 28
    # wee need to actually expand $FEDORA_DOCKER_IMAGE or it won't be expanded by itself
    # (too many levels of indirections)
    CURRENT_DOCKER_IMAGE: $CI_REGISTRY/libinput/$CI_PROJECT_NAME/fedora/$FEDORA_VERSION:latest
  <<: *docker_check

fedora:27@docker-check:
  variables:
    GIT_STRATEGY: none
    FEDORA_VERSION: 27
    # wee need to actually expand $FEDORA_DOCKER_IMAGE or it won't be expanded by itself
    # (too many levels of indirections)
    CURRENT_DOCKER_IMAGE: $CI_REGISTRY/libinput/$CI_PROJECT_NAME/fedora/$FEDORA_VERSION:latest
  <<: *docker_check

ubuntu:17.10@docker-check:
  variables:
    GIT_STRATEGY: none
    UBUNTU_VERSION: "17.10"
    # wee need to actually expand $UBUNTU_DOCKER_IMAGE or it won't be expanded by itself
    # (too many levels of indirections)
    CURRENT_DOCKER_IMAGE: $CI_REGISTRY/libinput/$CI_PROJECT_NAME/ubuntu/$UBUNTU_VERSION:latest
  <<: *docker_check

ubuntu:18.04@docker-check:
  variables:
    GIT_STRATEGY: none
    UBUNTU_VERSION: "18.04"
    # wee need to actually expand $UBUNTU_DOCKER_IMAGE or it won't be expanded by itself
    # (too many levels of indirections)
    CURRENT_DOCKER_IMAGE: $CI_REGISTRY/libinput/$CI_PROJECT_NAME/ubuntu/$UBUNTU_VERSION:latest
  <<: *docker_check


#################################################################
#                                                               #
#                     docker prep stage                         #
#                                                               #
#################################################################

#
# This stage will recreate the docker images only if the previous
# stage had a build failure, i.e. the image is too old or if it is
# missing some dependencies.
#
.fedora@docker-prep: &fedora_docker_prep
  stage: docker_prep
  services:
    - docker:dind
  before_script:
    #- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # if the check was successful, we just skip recreating the docker image
    - test -e .img_ready && exit 0

    # create a Dockerfile with our dependencies
    - echo "FROM fedora:$FEDORA_VERSION" > Dockerfile
    - echo "WORKDIR /app" >> Dockerfile
    - echo "RUN dnf upgrade -y ; dnf clean all" >> Dockerfile
    - echo "RUN dnf install -y $FEDORA_RPMS ; dnf clean all" >> Dockerfile

    # create the docker image
    - docker build --tag $FEDORA_DOCKER_IMAGE .

    # push the docker image to the libinput registry
    - docker push $FEDORA_DOCKER_IMAGE
  <<: *restrict_docker_creation

fedora:28@docker-prep:
  variables:
    GIT_STRATEGY: none
    FEDORA_VERSION: 28
  <<: *fedora_docker_prep
  dependencies:
    # Note: we can not use $FEDORA_VERSION here
    - fedora:28@docker-check

fedora:27@docker-prep:
  variables:
    GIT_STRATEGY: none
    FEDORA_VERSION: 27
  <<: *fedora_docker_prep
  dependencies:
    # Note: we can not use $FEDORA_VERSION here
    - fedora:27@docker-check

# FIXME: we should clean up the apt cache between each run
.ubuntu@docker-prep: &ubuntu_docker_prep
  stage: docker_prep
  services:
    - docker:dind
  before_script:
    - docker login -u $GITLAB_USER_LOGIN -p $REGISTRY_FREEDESKTOP_TOKEN $CI_REGISTRY
  script:
    # if the check was successful, we just skip recreating the docker image
    - test -e .img_ready && exit 0

    # create a Dockerfile with our dependencies
    - echo "FROM ubuntu:$UBUNTU_VERSION" > Dockerfile
    - echo "WORKDIR /app" >> Dockerfile
    - echo "RUN apt-get update" >> Dockerfile
    - echo "RUN apt-get install -y software-properties-common" >> Dockerfile
    - echo "RUN add-apt-repository universe" >> Dockerfile
    - echo "RUN apt-get update" >> Dockerfile
    - echo "RUN apt-get install -y $UBUNTU_DEBS" >> Dockerfile

    # create the docker image
    - docker build --tag $UBUNTU_DOCKER_IMAGE .

    # push the docker image to the libinput registry
    - docker push $UBUNTU_DOCKER_IMAGE
  <<: *restrict_docker_creation

ubuntu:17.10@docker-prep:
  variables:
    GIT_STRATEGY: none
    UBUNTU_VERSION: "17.10"
  <<: *ubuntu_docker_prep
  dependencies:
    # Note: we can not use $UBUNTU_VERSION here
    - ubuntu:17.10@docker-check

ubuntu:18.04@docker-prep:
  variables:
    GIT_STRATEGY: none
    UBUNTU_VERSION: "18.04"
  <<: *ubuntu_docker_prep
  dependencies:
    # Note: we can not use $UBUNTU_VERSION here
    - ubuntu:18.04@docker-check

# Add some manual runners to be able to recreate the cache on a day
# the list of the rpms changed

fedora:28@force-docker-prep:
  variables:
    GIT_STRATEGY: none
    FEDORA_VERSION: 28
  <<: *fedora_docker_prep
  when: manual
  dependencies: []

fedora:27@force-docker-prep:
  variables:
    GIT_STRATEGY: none
    FEDORA_VERSION: 27
  <<: *fedora_docker_prep
  when: manual
  dependencies: []

ubuntu:17.10@force-docker-prep:
  variables:
    GIT_STRATEGY: none
    UBUNTU_VERSION: "17.10"
  <<: *ubuntu_docker_prep
  when: manual
  dependencies: []

ubuntu:18.04@force-docker-prep:
  variables:
    GIT_STRATEGY: none
    UBUNTU_VERSION: "18.04"
  <<: *ubuntu_docker_prep
  when: manual
  dependencies: []

#################################################################
#                                                               #
#                       build stage                             #
#                                                               #
#################################################################

#
# Fedora
#

.fedora@template: &fedora_template
  stage: build
  image: $FEDORA_DOCKER_IMAGE
  <<: *default_artifacts
  dependencies: []

.fedora:28@template: &fedora_28_template
  variables:
    FEDORA_VERSION: 28
  <<: *fedora_template

.fedora:27@template: &fedora_27_template
  variables:
    FEDORA_VERSION: 27
  <<: *fedora_template

fedora:28@default-build:
  <<: *fedora_28_template
  <<: *default_build

fedora:28@build-no-libwacom:
  <<: *fedora_28_template
  script:
    - MESON_PARAMS="-Dlibwacom=false" eval $BUILDSTRING
    - dnf remove -y libwacom libwacom-devel
    - MESON_PARAMS="-Dlibwacom=false" eval $BUILDSTRING

fedora:28@build-no-docs:
  <<: *fedora_28_template
  script:
    - MESON_PARAMS="-Ddocumentation=false" eval $BUILDSTRING
    - dnf remove -y doxygen graphviz
    - MESON_PARAMS="-Ddocumentation=false" eval $BUILDSTRING

fedora:28@build-no-debug-gui:
  <<: *fedora_28_template
  script:
    - MESON_PARAMS="-Ddebug-gui=false" eval $BUILDSTRING
    - dnf remove -y gtk3-devel
    - MESON_PARAMS="-Ddebug-gui=false" eval $BUILDSTRING

fedora:28@build-no-tests:
  <<: *fedora_28_template
  script:
    - MESON_PARAMS="-Ddtests=false" eval $BUILDSTRING
    - dnf remove -y check-devel
    - MESON_PARAMS="-Dtests=false" eval $BUILDSTRING

fedora:28@scan-build:
  <<: *fedora_28_template
  script:
    - NINJA_ARGS="scan-build" eval $BUILDSTRING
    - test ! -d $MESON_BUILDDIR/meson-logs/scanbuild || test $(find $MESON_BUILDDIR/meson-logs/scanbuild -maxdepth 0 ! -empty -exec echo "not empty" \; | wc -l) -eq 0 || (echo "Check scan-build results" && false)

fedora-27@default-build:
  <<: *fedora_27_template
  <<: *default_build

#
# Ubuntu
#

.ubuntu@template: &ubuntu_template
  stage: build
  image: $UBUNTU_DOCKER_IMAGE
  <<: *default_artifacts
  dependencies: []

ubuntu:17.10@default-build:
  variables:
    UBUNTU_VERSION: "17.10"
  <<: *ubuntu_template
  <<: *default_build

ubuntu:18.04@default-build:
  variables:
    UBUNTU_VERSION: "17.10"
  <<: *ubuntu_template
  <<: *default_build
