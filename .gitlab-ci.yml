# vim: set expandtab shiftwidth=2 tabstop=8 textwidth=0:
#
# This is a bit complicated because GitLab only allows one script: per job
# but we have a bunch of commands we want to re-run for each build. YAML
# doesn't have anything to append to arrays with templates.
#
# We could just define everything as separate job but that would require 
# pulling docker images && dnf update on every job. That's slow and heavy.
#
# So instead we use BUILDSTRING as the main builder and pass what we need through
# shell variables. The only two that matter:
#
# MESON_PARAMS=-Denable-something=true
# NINJA_ARGS=dist

variables:
  MESON_BUILDDIR: builddir
  NINJA_ARGS: ''
  MESON_PARAMS: ''
  FEDORA_RPMS: 'git gcc gcc-c++ meson check-devel libudev-devel libevdev-devel doxygen graphviz valgrind binutils libwacom-devel cairo-devel   gtk3-devel   glib2-devel    mtdev-devel'
  UBUNTU_DEBS: 'git gcc g++     meson check       libudev-dev   libevdev-dev   doxygen graphviz valgrind binutils libwacom-dev   libcairo2-dev libgtk-3-dev libglib2.0-dev libmtdev-dev'

stages:
  - docker_prep
  - test
  - clean

.defaults: &defaults
  artifacts:
    name: "meson-logs-$CI_JOB_NAME"
    when: always
    expire_in: 1 week
    paths:
      - $MESON_BUILDDIR/meson-logs

.ubuntu_install: &ubuntu_install
  before_script:
    - apt-get update
    - apt-get install -y software-properties-common
    - add-apt-repository universe
    - apt-get update
    - apt-get install -y $UBUNTU_DEBS

.default_build: &default_build
  <<: *defaults
  script:
    - rm -rf $MESON_BUILDDIR
    - meson $MESON_BUILDDIR $MESON_PARAMS
    - meson configure $MESON_BUILDDIR
    - ninja -C $MESON_BUILDDIR $NINJA_ARGS

fedora:latest:prep:
  stage: docker_prep
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker login -u $GITLAB_USER_LOGIN -p $REGISTRY_FREEDESKTOP_TOKEN $CI_REGISTRY
  script:
    # update the CI image or bootstrap it
    - python3 prepare_ci_docker_images.py
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$CI_BUILD_REF

fedora:latest:test:
  stage: test
  image: $CI_REGISTRY/$CI_PROJECT_PATH:latest
  <<: *defaults
  <<: *default_build

.fedora_latest_prep_cache:
  stage: initial
  image: fedora:latest
  script:
    - dnf update -y --downloadonly --downloaddir rpm_cache
    - dnf install -y --downloadonly --downloaddir rpm_cache $RPMS

.build-standard:
  image: fedora:latest
  <<: *defaults
  <<: *default_build

.build-nowacom:
  image: fedora:latest
  variables:
    MESON_PARAMS: '-Dlibwacom=false'
  <<: *defaults
  <<: *default_build

.build-nodoc:
  image: fedora:latest
  variables:
    MESON_PARAMS: '-Ddocumentation=false'
  <<: *defaults
  <<: *default_build

.build-nogui:
  image: fedora:latest
  variables:
    MESON_PARAMS: '-Ddebug-gui=false'
  <<: *defaults
  <<: *default_build

.build-notests:
  image: fedora:latest
  variables:
    MESON_PARAMS: '-Dtests=false'
  <<: *defaults
  <<: *default_build

.fedora-27:
  stage: initial
  image: fedora:27
  <<: *defaults
  <<: *default_build

.ubuntu-17.10:
  image: ubuntu:artful
  <<: *ubuntu_install
  <<: *default_build

.ubuntu-18.04:
  image: ubuntu:bionic
  <<: *ubuntu_install
  <<: *default_build
